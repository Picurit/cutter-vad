[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "real-time-vad-silero"
version = "1.0.0"
description = "Real-time Voice Activity Detection using Silero models - Python implementation"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "VAD Library Team", email = "team@vadlibrary.com"}
]
keywords = ["vad", "voice", "activity", "detection", "silero", "real-time", "audio"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio :: Analysis",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "torch>=1.9.0",
    "onnxruntime>=1.10.0",
    "scipy>=1.7.0",
    "pydantic>=2.0.0",
    "typing-extensions>=4.0.0",
    "PyYAML>=6.0.0",
    "websockets>=11.0.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    "python-multipart>=0.0.6"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0"
]
audio = [
    "soundfile>=0.10.0",
    "librosa>=0.9.0",
    "pyaudio>=0.2.11"
]
websocket = [
    "websockets>=11.0.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    "python-multipart>=0.0.6"
]
examples = [
    "matplotlib>=3.5.0",
    "jupyter>=1.0.0"
]

[project.urls]
Homepage = "https://github.com/picurit/cutter-vad"
Documentation = "https://github.com/picurit/cutter-vad/blob/main/README.md"
Repository = "https://github.com/picurit/cutter-vad"
Issues = "https://github.com/picurit/cutter-vad/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"real_time_vad.models" = ["*.onnx"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["real_time_vad"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]
